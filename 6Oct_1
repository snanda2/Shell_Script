import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import requests
import pandas as pd
from datetime import datetime, timedelta
import xlsxwriter

# Jira server URL and credentials
JIRA_SERVER = 'https://your-jira-instance.com'
USERNAME = 'your_username'
PASSWORD = 'your_password'

# Project key for the specific project you want to query
PROJECT_KEY = 'YOUR_PROJECT_KEY'

# Calculate the start and end dates for the last 15 days
end_date = datetime.now()
start_date = end_date - timedelta(days=14)  # 14 days ago

# Define the Jira API endpoint for searching issues
api_endpoint = f'{JIRA_SERVER}/rest/api/2/search'

# Initialize variables for pagination
start_at = 0
max_results = 1000  # Adjust as needed to fetch more results per page

# Initialize an empty list to store issue data for specific assignees
assignee_issue_data = []

# Read assignees from a text file
with open('assignees.txt', 'r') as assignees_file:
    assignees = [line.strip() for line in assignees_file]

while True:
    # Construct the JQL query for issues created in the last 15 days for the specified project with pagination
    jql_query = (
        f'project = {PROJECT_KEY} AND created >= "{start_date.strftime("%Y-%m-%d")}" '
        f'AND created <= "{end_date.strftime("%Y-%m-%d")}" ORDER BY Rank DESC'
    )

    # Set up headers for authentication
    headers = {
        'Content-Type': 'application/json',
    }

    # Create a session for making authenticated requests
    session = requests.Session()
    session.auth = (USERNAME, PASSWORD)

    # Define the query parameters including the fields you want (e.g., summary, assignee, status, created, resolved) and pagination
    params = {
        'jql': jql_query,
        'fields': 'key,summary,assignee,status,created,resolutiondate',  # Add any additional fields you need
        'startAt': start_at,
        'maxResults': max_results,
    }

    # Make the API request to Jira
    response = session.get(api_endpoint, headers=headers, params=params)

    # Check if the request was successful
    if response.status_code == 200:
        data = response.json()
        issues = data.get('issues', [])

        # Filter and append issue data for specific assignees
        for issue in issues:
            assignee_data = issue['fields']['assignee']
            assignee_name = assignee_data['displayName'] if assignee_data else 'Unassigned'
            if assignee_name in assignees:
                issue_key = issue['key']
                summary = issue['fields']['summary']
                status = issue['fields']['status']['name']
                created_date = datetime.strptime(issue['fields']['created'], '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%Y-%m-%d')
                resolved_date = issue['fields'].get('resolutiondate', '')
                if resolved_date:
                    resolved_date = datetime.strptime(resolved_date, '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%Y-%m-%d')
                assignee_issue_data.append([issue_key, summary, assignee_name, status, created_date, resolved_date])

        # Check if there are more pages of results
        if len(issues) < max_results:
            break  # No more pages
        else:
            start_at += max_results  # Move to the next page
    else:
        print(f'Error: {response.status_code} - {response.text}')
        break

# Create a DataFrame with issues for specific assignees
df = pd.DataFrame(assignee_issue_data, columns=["Issue Key", "Summary", "Assignee", "Status", "Created Date", "Resolved Date"])

# Format the "Created Date" and "Resolved Date" columns to display only the date part
df["Created Date"] = pd.to_datetime(df["Created Date"]).dt.strftime('%Y-%m-%d')
df["Resolved Date"] = pd.to_datetime(df["Resolved Date"]).dt.strftime('%Y-%m-%d')

# Calculate assignee counts
assignee_counts = df['Assignee'].value_counts().reset_index()
assignee_counts.columns = ['Assignee', 'Count']

# Create a DataFrame for assignee counts
assignee_counts_df = pd.DataFrame(assignee_counts)

# Calculate Closed vs Open counts
closed_vs_open_counts = df['Status'].value_counts().reset_index()
closed_vs_open_counts.columns = ['Status', 'Count']

# Create a DataFrame for Closed vs Open counts
closed_vs_open_counts_df = pd.DataFrame(closed_vs_open_counts)

# Calculate Status counts
status_counts = df['Status'].value_counts().reset_index()
status_counts.columns = ['Status', 'Count']

# Create a DataFrame for Status counts
status_counts_df = pd.DataFrame(status_counts)

# Create an Excel writer object for the output file using the xlsxwriter engine
excel_filename = "jira_issues_report.xlsx"
with pd.ExcelWriter(excel_filename, engine='xlsxwriter', datetime_format='yyyy-mm-dd') as writer:
    # Save all issues to the "all issues" sheet
    df.to_excel(writer, sheet_name='all issues', index=False)

    # Save assignee counts to a new sheet
    assignee_counts_df.to_excel(writer, sheet_name='assignee counts', index=False)

    # Save Closed vs Open counts to a new sheet
    closed_vs_open_counts_df.to_excel(writer, sheet_name='Closed vs Open', index=False)

    # Save Status counts to a new sheet
    status_counts_df.to_excel(writer, sheet_name='Status Count', index=False)

    # Get the workbook and the worksheets
    workbook = writer.book
    all_issues_worksheet = writer.sheets['all issues']
    assignee_counts_worksheet = writer.sheets['assignee counts']
    closed_vs_open_worksheet = writer.sheets['Closed vs Open']
    status_count_worksheet = writer.sheets['Status Count']

    # Create a format for the header row with background color and borders
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'align': 'center',
        'valign': 'vcenter',
        'fg_color': '#FFCC99',  # You can change the background color as needed
        'border': 1  # Add borders to all sides
    })

    # Apply the header format to the header row in all sheets
    for worksheet in [all_issues_worksheet, assignee_counts_worksheet, closed_vs_open_worksheet, status_count_worksheet]:
        # Apply the header format to the header row in all sheets
    for worksheet in [all_issues_worksheet, assignee_counts_worksheet, closed_vs_open_worksheet, status_count_worksheet]:
        worksheet.set_row(0, None, header_format)

    # Set column widths for all sheets (adjust as needed)
    for worksheet in [all_issues_worksheet, assignee_counts_worksheet, closed_vs_open_worksheet, status_count_worksheet]:
        worksheet.set_column('A:Z', 15)  # Set a default width for columns A to Z

# ... (rest of the code for sending the email)

# ...
